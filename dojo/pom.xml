<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>codeBucket</artifactId>
        <groupId>org.roy.lessons</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>dojo</artifactId>

    <properties>
        <jdk.version>1.8</jdk.version>
    </properties>


    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <plugins>

            <!-- 编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <!-- 源代码使用的开发版本 -->
                    <source>${jdk.version}</source>

                    <!-- 需要生成的目标class文件的编译版本 -->
                    <target>${jdk.version}</target>

                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                </configuration>
            </plugin>

            <!--<plugin>-->
            <!--<groupId>org.junit</groupId>-->
            <!--<artifactId>junit4-runner</artifactId>-->
            <!--</plugin>-->
        </plugins>
    </build>

</project>